(<- (desig:action-grounding ?action-designator (pp-plans:pick-up ?resolved-action-designator))
      (spec:property ?action-designator (:type :pouring))
      (spec:property ?action-designator (:source-container ?source-container-designator))
      (spec:property ?action-designator (:target-container ?target-container-designator))
      (desig:current-designator ?source-container-designator ?current-source-container-desig)
      (desig:current-designator ?target-container-designator ?current-target-container-desig)
      (spec:property ?current-source-container-desig (:type ?source-container-type))
      (spec:property ?current-target-container-desig (:type ?target-container-type))
      (spec:property ?current-source-container-desig (:name ?source-container-name))
      (spec:property ?current-target-container-desig (:name ?target-container-name))
      (-> (spec:property ?action-designator (:arm ?arm))
          (true)
          (man-int:robot-free-hand ?_ ?arm))
      (lisp-fun man-int:get-container-transform ?current-source-container-desig ?source-container-transform)
      (lisp-fun man-int:get-container-transform ?current-target-container-desig ?target-container-transform)
      (lisp-fun man-int:calculate-container-faces ?source-container-transform (?facing-robot-face ?bottom-face))
      (lisp-fun man-int:calculate-container-faces ?target-container-transform (?facing-robot-face ?bottom-face))
      (-> (man-int:container-rotationally-symmetric ?source-container-type)
           (equal ?rotationally-symmetric t)
           (equal ?rotationally-symmetric nil))
      (-> (man-int:container-rotationally-symmetric ?target-container-type)
           (equal ?rotationally-symmetric t)
           (equal ?rotationally-symmetric nil))
      (-> (spec:property ?action-designator (:grasp ?grasp))
        (true)
        (and (lisp-fun man-int:get-action-grasps ?source-container-type ?arm ?source-container-transform ?grasps)
           (member ?grasp ?grasps)))
      (lisp-fun man-int:get-action-gripping-effort ?source-container-type ?effort)
      (lisp-fun man-int:get-action-gripper-opening ?source-container-type ?gripper-opening)
      (equal ?containers (?current-source-container-desig ?current-target-container-desig))
      (-> (equal ?arm :left)
          (and (lisp-fun man-int:get-action-trajectory :pouring ?arm ?grasp T ?containers
                         ?left-trajectory)
               (lisp-fun man-int:get-traj-poses-by-label ?left-trajectory :reaching
                         ?left-reach-poses)
               (lisp-fun man-int:get-traj-poses-by-label ?left-trajectory :grasping
                         ?left-grasp-poses))
          (and (equal ?left-reach-poses NIL)
               (equal ?left-grasp-poses NIL)))
      (-> (equal ?arm :right)
          (and (lisp-fun man-int:get-action-trajectory :pouring ?arm ?grasp T ?containers
                         ?right-trajectory)
               (lisp-fun man-int:get-traj-poses-by-label ?right-trajectory :reaching
                         ?right-reach-poses)
               (lisp-fun man-int:get-traj-poses-by-label ?right-trajectory :grasping
                         ?right-grasp-poses))
          (and (equal ?right-reach-poses NIL)
               (equal ?right-grasp-poses NIL)))
      (desig:designator :action ((:type :pouring)
                                 (:source-container ?current-source-container-desig)
                                 (:target-container ?current-target-container-desig)
                                 (:source-container-name  ?source-container-name)
                                 (:target-container-name  ?target-container-name)
                                 (:arm ?arm)
                                 (:gripper-opening ?gripper-opening)
                                 (:effort ?effort)
                                 (:grasp ?grasp)
                                 (:left-reach-poses ?left-reach-poses)
                                 (:right-reach-poses ?right-reach-poses)
                                 (:left-grasp-poses ?left-grasp-poses)
                                 (:right-grasp-poses ?right-grasp-poses)
                                 (:pour :pouring))
                        ?resolved-action-designator)))