(<- (desig:action-grounding ?action-designator (pp-plans:place-down ?resolved-action-designator))
      (spec:property ?action-designator (:type :placing-down))
      (spec:property ?action-designator (:object ?object-designator))
      (desig:current-designator ?object-designator ?current-object-desig)
      (spec:property ?current-object-desig (:type ?object-type))
      (spec:property ?current-object-desig (:name ?object-name))
      (spec:property ?action-designator (:location ?location-designator))
      (desig:current-designator ?location-designator ?current-location-desig)
      (spec:property ?current-location-desig (:type :location))
      (spec:property ?current-location-desig (:name ?location-name))
      (lisp-fun man-int:get-object-transform ?current-object-desig ?object-transform)
      (lisp-fun man-int:get-location-transform ?current-location-desig ?location-transform)
      (lisp-fun man-int:calculate-object-faces ?object-transform (?facing-robot-face ?bottom-face))
      (-> (spec:property ?action-designator (:arm ?arm))
          (true)
          (man-int:robot-holding-object ?_ ?arm ?current-object-desig))
      (-> (man-int:object-rotationally-symmetric ?object-type)
           (equal ?rotationally-symmetric t)
           (equal ?rotationally-symmetric nil))
      (-> (spec:property ?action-designator (:release ?release))
        (true)
        (and (lisp-fun man-int:get-action-releases ?object-type ?arm ?object-transform ?location-transform ?releases)
           (member ?release ?releases)))
      (lisp-fun man-int:get-action-gripper-opening ?object-type ?gripper-opening)
      (equal ?objects (?current-object-desig))
      (-> (equal ?arm :left)
          (and (lisp-fun man-int:get-action-trajectory :placing-down ?arm ?release T ?objects
                         ?left-trajectory)
               (lisp-fun man-int:get-traj-poses-by-label ?left-trajectory :releasing
                         ?left-release-poses)
               (lisp-fun man-int:get-traj-poses-by-label ?left-trajectory :placing-down
                         ?left-place-poses))
          (and (equal ?left-release-poses NIL)
               (equal ?left-place-poses NIL)))
      (-> (equal ?arm :right)
          (and (lisp-fun man-int:get-action-trajectory :placing-down ?arm ?release T ?objects
                         ?right-trajectory)
               (lisp-fun man-int:get-traj-poses-by-label ?right-trajectory :releasing
                         ?right-release-poses)
               (lisp-fun man-int:get-traj-poses-by-label ?right-trajectory :placing-down
                         ?right-place-poses))
          (and (equal ?right-release-poses NIL)
               (equal ?right-place-poses NIL)))
      (desig:designator :action ((:type :placing-down)
                                 (:object ?current-object-desig)
                                 (:object-name  ?object-name)
                                 (:arm ?arm)
                                 (:gripper-opening ?gripper-opening)
                                 (:release ?release)
                                 (:location ?current-location-desig)
                                 (:location-name ?location-name)
                                 (:left-release-poses ?left-release-poses)
                                 (:right-release-poses ?right-release-poses)
                                 (:left-place-poses ?left-place-poses)
                                 (:right-place-poses ?right-place-poses))
                        ?resolved-action-designator)))