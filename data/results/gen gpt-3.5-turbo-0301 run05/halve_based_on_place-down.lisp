(<- (desig:action-grounding ?action-designator (halve ?current-object-designator ?knife-designator ?cutting-board-designator ?location))
    (spec:property ?action-designator (:type :cutting))
    (-> (spec:property ?action-designator (:object ?object-designator))
        (or (cpoe:object-in-hand ?object-designator ?knife-designator)
            (and (format "WARNING: Wanted to cut an object ~a with knife ~a, ~
                          but it's not in the hand.~%" ?object-designator ?knife-designator)
                 ))
        (cpoe:object-in-hand ?object-designator ?knife-designator))
    (once (or (cpoe:object-in-hand ?knife-designator ?knife-designator)
              (spec:property ?action-designator (:knife ?knife-designator))))
    (once (or (cpoe:object-in-hand ?cutting-board-designator ?cutting-board-designator)
              (spec:property ?action-designator (:cutting-board ?cutting-board-designator))))
    (desig:current-designator ?object-designator ?current-object-designator)
    (spec:property ?current-object-designator (:type ?object-type))
    (spec:property ?current-object-designator (:name ?object-name))
    (and (member ?object-type '(food))
         (lisp-fun cram-robot-interfaces:robot ?robot)
         (lisp-fun cram-robot-interfaces:arm ?robot ?knife-designator)
         (lisp-fun cram-robot-interfaces:arm ?robot ?cutting-board-designator))
    (-> (spec:property ?action-designator (:target ?location))
        (and (desig:current-designator ?location ?current-location-designator)
             (desig:designator-groundings ?current-location-designator ?poses)
             (member ?target-pose ?poses)
             (symbol-value cram-tf:*robot-base-frame* ?base-frame)
             (lisp-fun cram-tf:ensure-pose-in-frame ?target-pose ?base-frame :use-zero-time t
                       ?target-pose-in-base)
             (lisp-fun roslisp-utilities:rosify-underscores-lisp-name ?object-name ?tf-name)
             (lisp-fun cram-tf:pose-stamped->transform-stamped ?target-pose-in-base ?tf-name
                       ?target-transform))
        (and (lisp-fun obj-int:get-object-transform ?current-object-designator ?target-transform)
             (lisp-fun obj-int:get-object-pose ?current-object-designator ?target-pose)
             (desig:designator :location ((:pose ?target-pose)) ?location))))